// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @unique @default(uuid())
  name      String   @db.VarChar(30)
  email     String   @unique @db.VarChar(30)
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(3)
  order     Order[]

  @@map("users")
}

model Food {
  id        String      @id @default(uuid())
  name      String      @db.VarChar(30)
  price     Int         @db.Int
  createdAt DateTime    @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime    @updatedAt @map("updated_at") @db.Timestamp(3)
  orderItem OrderItem[]

  @@map("foods")
}

model Order {
  id         String      @id @default(uuid())
  status     String      @db.VarChar(30)
  userId     String      @map("user_id")
  user       User?       @relation(fields: [userId], references: [id])
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt  DateTime    @updatedAt @map("updated_at") @db.Timestamp(3)
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String   @map("order_id")
  order     Order?   @relation(fields: [orderId], references: [id])
  foodId    String   @map("food_id")
  food      Food?    @relation(fields: [foodId], references: [id])
  quantity  Int      @db.Int
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(3)

  @@map("order-items")
}
